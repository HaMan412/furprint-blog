---
import { Icon } from "astro-icon/components";
// import Card from "../temple/Card.astro"; // <-- 已移除
import type { TOCBarProps } from "@interfaces/data";

// This prop indicates whether to render the TOC
// (useful to conditionally show on certain pages)
const { headings = [], showTOC = true } = Astro.props as TOCBarProps;
---

{
  showTOC && headings.length > 0 && (
    <div id="toc-container" class="mt-4 z-10 md:max-h-[calc(100vh-2rem)] ">
      <div class="p-4">
        <nav class="toc-nav max-h-[calc(100vh-200px)] overflow-y-auto scrollbar-none relative">
          {/* Animated active indicator - now moved outside the ul structure */}
          <div
            id="active-indicator"
            class="absolute bg-primary/10 rounded-lg opacity-0 shadow-sm pointer-events-none z-0"
          />
          <ul class="space-y-0 relative z-10">
            {headings.map((heading, index) => (
              <li>
                <a
                  href={`#heading-${index}`}
                  data-heading-slug={heading.slug}
                  data-heading-depth={heading.depth}
                  data-index={index}
                  class={`toc-link relative flex items-center py-2 px-2 rounded-lg ${heading.depth === 1 ? "font-medium" : ""}`}
                  style={`padding-left: ${12 + (heading.depth - 1) * 16}px;`}
                >
                  <Icon
                    name="tabler:chevron-right"
                    class="icon-indicator absolute left-1 opacity-0 transition-all duration-200 w-4 h-4 text-primary"
                  />
                  <span class="link-text transition-transform duration-200">{heading.text}</span>
                </a>
              </li>
            ))}
          </ul>
        </nav>
      </div>
    </div>
  )
}

<style>
  /* Style 部分保持不变 */
</style>

<script>
  // Script 部分保持不变
</script>
