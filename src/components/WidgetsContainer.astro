---
// 这个组件接收一个标题作为属性
const { title } = Astro.props;
---

<div class="widget-container text-sm">
  <div class="flex justify-between items-center mb-2">
    <h2 class="text-lg font-bold">{title}</h2>
    <!-- 这是唯一的、全局的刷新按钮 -->
    <div id="widget-refresh-button" class="cursor-pointer text-base-content/60 hover:text-base-content">
      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"/><path d="M21 3v5h-5"/><path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"/><path d="M3 21v-5h5"/></svg>
    </div>
  </div>
  
  <!-- <slot /> 是一个占位符，它会渲染所有被这个组件包裹的子组件 -->
  <div class="widget-content">
    <slot />
  </div>
</div>

<script is:inline>
  // 这段脚本只会在页面上存在一次，专门负责刷新按钮的逻辑
  const refreshButton = document.getElementById('widget-refresh-button');
  if (refreshButton) {
    refreshButton.addEventListener('click', () => {
      // 给图标添加旋转动画
      const svg = refreshButton.querySelector('svg');
      if (svg) {
        svg.classList.add('animate-spin');
        // 1.5秒后移除动画，防止卡住
        setTimeout(() => svg.classList.remove('animate-spin'), 1500);
      }
      
      // 创建并分发一个自定义事件，通知所有子组件进行刷新
      const refreshEvent = new CustomEvent('refresh-widgets');
      document.dispatchEvent(refreshEvent);
    });
  }
</script>
